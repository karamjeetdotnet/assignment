{"version":3,"sources":["utilities/common.js","actions/service.js","reducers/service.js","actions/provider.js","reducers/provider.js","reducers/index.js","store.js","containers/loading.js","containers/notfound.js","containers/part1.js","containers/part2.js","components/routes.js","components/index.js","serviceWorker.js","index.js"],"names":["API_URL","SERVICE_READ","SERVICE_READ_PENDING","SERVICE_READ_FULFILLED","SERVICE_READ_REJECTED","SERVICE_READ_ACTIVE","defaultState","services","filteredServices","processing","error","state","action","type","payload","data","map","x","isActive","id","PROVIDER_READ","PROVIDER_READ_PENDING","PROVIDER_READ_FULFILLED","PROVIDER_READ_REJECTED","PROVIDER_READ_FILTER","providers","filteredProviders","filter","attributes","subspecialties","indexOf","combineReducers","serviceReducer","providerReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","push","thunk","promise","middleware","applyMiddleware","createStore","reducers","Loading","className","style","paddingRight","display","data-backdrop","data-keyboard","tabIndex","position","margin","top","width","backgroundColor","border","role","height","defaultProps","size","connect","NotFound","location","pathname","Part1","props","useEffect","dispathFetchServices","dispatchFetchProviders","class","service","key","onClick","dispatchFilterProvders","name","dispatchActivateService","length","isPart2","provider","src","alt","speciality","ownProps","dispatch","Axios","get","serviceName","filterProviderByService","serviceId","Part2","Routes","to","activeClassName","path","component","exact","App","Boolean","hostname","match","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26f5544d.chunk.js","sourcesContent":["export const API_URL = \"https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/\";","import Axios from \"axios\";\r\nimport { API_URL } from \"../utilities/common\";\r\n\r\nconst SERVICE = 'SERVICE';\r\n\r\nexport const SERVICE_READ = `${SERVICE}_READ`;\r\nexport const SERVICE_READ_PENDING = `${SERVICE_READ}_PENDING`;\r\nexport const SERVICE_READ_FULFILLED = `${SERVICE_READ}_FULFILLED`;\r\nexport const SERVICE_READ_REJECTED = `${SERVICE_READ}_REJECTED`;\r\nexport const SERVICE_READ_ACTIVE = `${SERVICE_READ}_ACTIVE`;\r\n\r\n  export const serviceRead = () => {\r\n    return (dispatch) => {\r\n      dispatch({\r\n        type: SERVICE_READ,\r\n        payload: Axios.get(`${API_URL}services`)\r\n      });\r\n    }\r\n  }\r\n  export const activateService = id => {\r\n    return (dispatch) => {\r\n      dispatch({\r\n        type: SERVICE_READ_ACTIVE,\r\n        payload: id\r\n      });\r\n    }  \r\n  }","import { SERVICE_READ, SERVICE_READ_PENDING, SERVICE_READ_FULFILLED, SERVICE_READ_REJECTED, SERVICE_READ_ACTIVE } from \"../actions/service\";\r\n\r\nconst defaultState = {\r\n    services: [],\r\n    filteredServices: [],\r\n    processing: false,\r\n    error: null\r\n};\r\n\r\nconst services = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case SERVICE_READ:\r\n        case SERVICE_READ_PENDING:\r\n            return {\r\n                ...state,\r\n                processing: true,\r\n            }\r\n        case SERVICE_READ_FULFILLED:\r\n            return {\r\n                ...state,\r\n                processing: false,\r\n                services: [...action.payload.data.data],\r\n                filteredServices: [...action.payload.data.data]\r\n            };\r\n        case SERVICE_READ_REJECTED:\r\n            return {\r\n                ...state,\r\n                processing: false,\r\n                error: action.payload\r\n            };\r\n        case SERVICE_READ_ACTIVE:\r\n            return {\r\n                ...state,\r\n                filteredServices: state.services.map(x=> {\r\n                    return {\r\n                        ...x,\r\n                        isActive: action.payload === x.id\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default services;","import Axios from \"axios\";\r\nimport { API_URL } from \"../utilities/common\";\r\n\r\nconst PROVIDER = 'PROVIDER';\r\n\r\nexport const PROVIDER_READ = `${PROVIDER}_READ`;\r\nexport const PROVIDER_READ_PENDING = `${PROVIDER_READ}_PENDING`;\r\nexport const PROVIDER_READ_FULFILLED = `${PROVIDER_READ}_FULFILLED`;\r\nexport const PROVIDER_READ_REJECTED = `${PROVIDER_READ}_REJECTED`;\r\nexport const PROVIDER_READ_FILTER = `${PROVIDER_READ}_FILTER`;\r\n\r\n  export const providerRead = () => {\r\n    return (dispatch) => {\r\n      dispatch({\r\n        type: PROVIDER_READ,\r\n        payload: Axios.get(`${API_URL}providers?include=locations%2Cschedules.location&page%5Bnumber%5D=1&page%5Bsize%5D=10`)\r\n      });\r\n    }\r\n  }\r\n  export const filterProviderByService = serviceName => {\r\n    return (dispatch) => {\r\n      dispatch({\r\n        type: PROVIDER_READ_FILTER,\r\n        payload: serviceName\r\n      });\r\n    }  \r\n  }","import { PROVIDER_READ, PROVIDER_READ_PENDING, PROVIDER_READ_FULFILLED, PROVIDER_READ_REJECTED, PROVIDER_READ_FILTER } from \"../actions/provider\";\r\n\r\nconst defaultState = {\r\n    providers: [],\r\n    filteredProviders: [],\r\n    processing: false,\r\n    error: null\r\n};\r\n\r\nconst providers = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case PROVIDER_READ:\r\n        case PROVIDER_READ_PENDING:\r\n            return {\r\n                ...state,\r\n                processing: true,\r\n            }\r\n        case PROVIDER_READ_FULFILLED:\r\n            return {\r\n                ...state,\r\n                processing: false,\r\n                providers: [...action.payload.data.data],\r\n                filteredProviders: [...action.payload.data.data]\r\n            };\r\n        case PROVIDER_READ_REJECTED:\r\n            return {\r\n                ...state,\r\n                processing: false,\r\n                error: action.payload\r\n            };\r\n        case PROVIDER_READ_FILTER: \r\n            return {\r\n                ...state,\r\n                filteredProviders: state.providers.filter(x => x.attributes.subspecialties.indexOf(action.payload) > -1)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default providers;","import { combineReducers } from 'redux';\r\nimport serviceReducer from './service';\r\nimport providerReducer from './provider';\r\n\r\nexport default combineReducers({\r\n    serviceReducer,\r\n    providerReducer\r\n});","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nimport reducers from \"./reducers\";\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;//redux dev tools debugger\r\n\r\nconst middlewares = [];\r\nmiddlewares.push(thunk);\r\nmiddlewares.push(promise);\r\nif (process.env.NODE_ENV === `development`) {\r\n    const { createLogger } = require(`redux-logger`);\r\n    const logger = createLogger({});\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst middleware = applyMiddleware(...middlewares);\r\n\r\nexport default createStore(\r\n    reducers,\r\n    composeEnhancer(middleware)\r\n);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Loading = ({ processing }) => {\r\n    if (processing) {\r\n        return (\r\n            <Loading-Container>\r\n                <div className=\"modal-open\">\r\n                    <div className=\"modal fade load-spinner show\" style={{ paddingRight: \"17px\", display: \"block\" }} data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\">\r\n                        <div className=\"modal-dialog modal-sm\" style={{\r\n                            display: \"table\",\r\n                            position: \"relative\",\r\n                            margin: \"0 auto\",\r\n                            top: \"calc(33% - 24px)\"\r\n                        }}>\r\n                            <div className=\"modal-content\" style={{ width: \"48px\", backgroundColor: \"transparent\", border: \"none\" }}>\r\n                                <div className=\"spinner-border\" role=\"status\" style={{ height: \"15rem\", width: \"15rem\" }}>\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal-backdrop fade show\"></div>\r\n                </div>\r\n\r\n            </Loading-Container>\r\n        )\r\n    } return null;\r\n};\r\nLoading.defaultProps = {\r\n    type: \"spinner-border\",\r\n    size: \"\"\r\n}\r\nconst mapStateToProps = state => ({ processing: state.processing })\r\nexport default connect(mapStateToProps)(Loading);","import React from 'react';\r\n\r\nconst NotFound = ({ location }) => {\r\n    return (<div>\r\n        <h3>\r\n            Page not found for location<code>{location.pathname}</code>\r\n        </h3>\r\n    </div>);\r\n}\r\n\r\nexport default NotFound;","import React, { useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { serviceRead, activateService } from '../actions/service';\r\nimport { providerRead, filterProviderByService } from '../actions/provider';\r\n\r\nlet Part1 = (props) => {\r\n    useEffect(() => {\r\n        props.dispathFetchServices();\r\n        props.dispatchFetchProviders();\r\n    }, [])\r\nconst Part1Result = ({providers}) => (<ul className=\"list-group\">\r\n{providers.map(provider => <li key={provider.id}\r\n  className=\"list-group-item\">\r\n  {provider.attributes.name}\r\n</li>)}\r\n</ul>)\r\nconst Part2Result = ({providers}) => (<div className=\"container\">\r\n{providers.map(provider => <div class=\"card flex-row flex-wrap\">\r\n        <div class=\"card-header border-0\">\r\n            <img src={provider.attributes[\"profile-image\"]} alt=\"\"/>\r\n        </div>\r\n        <div class=\"card-block px-2\">\r\n            <h4 class=\"card-title\">{provider.attributes.name}</h4>\r\n            {/* <p class=\"card-text\" dangerouslySetInnerHTML={{__html: provider.attributes.bio}}>{}</p> */}\r\n            <p class=\"card-text\">{provider.attributes.subspecialties.\r\n                map(speciality => <span class=\"badge badge-pill badge-primary\">{speciality}</span>)}</p>\r\n        </div>\r\n    </div>)}\r\n</div>)\r\nreturn (\r\n<>\r\n<div class=\"row\">\r\n  <div class=\"col-sm-6\"><fieldset>\r\n      <legend>control</legend>\r\n      <ul className=\"list-group\">\r\n      {props.services.map(service => <li key={service.id} \r\n                onClick={() => {\r\n                    props.dispatchFilterProvders(service.attributes.name);\r\n                    props.dispatchActivateService(service.id);\r\n                }} \r\n                className={`list-group-item ${service.isActive ? 'active' : ''}`}>\r\n        {service.attributes.name}\r\n    </li>)}\r\n    </ul>\r\n      </fieldset></div>\r\n  <div class=\"col-sm-6\"><fieldset>\r\n      <legend>results</legend>\r\n      {props.providers.length === 0 && \"No providers found for selected service\"}\r\n      {props.isPart2 ? <Part2Result providers={props.providers}/>:\r\n      <Part1Result providers={props.providers}/>}\r\n      </fieldset></div>\r\n</div>\r\n</>\r\n);}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        services: state.serviceReducer.filteredServices,\r\n        providers: state.providerReducer.filteredProviders\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n   return {\r\n       dispathFetchServices: () => {\r\n           dispatch(serviceRead());\r\n       },\r\n       dispatchFetchProviders: () => {\r\n           dispatch(providerRead());\r\n       },\r\n       dispatchFilterProvders: serviceName => {\r\n           dispatch(filterProviderByService(serviceName))\r\n       },\r\n       dispatchActivateService: serviceId => {\r\n           dispatch(activateService(serviceId))\r\n       }\r\n   };\r\n};\r\nPart1 = connect(mapStateToProps, mapDispatchToProps)(Part1);\r\nexport default Part1;","import React from 'react';\r\nimport Part1 from './part1';\r\n\r\nconst Part2 = () => (\r\n    <Part1 isPart2/>\r\n)\r\nexport default Part2","import React from 'react';\r\nimport { Route, Switch, Redirect, NavLink } from 'react-router-dom';\r\nimport Loading from '../containers/loading';\r\nimport NotFound from '../containers/notfound';\r\nimport Part1 from '../containers/part1';\r\nimport Part2 from '../containers/part2';\r\n\r\nconst Routes = ({}) => {\r\n    return (\r\n        <div>\r\n            <Loading />\r\n            <div className=\"nav nav-tabs\">\r\n            <li class=\"nav-item\"><NavLink to={`/part1`} activeClassName=\"active\" className=\"nav-link\">Part1</NavLink></li>\r\n            <li class=\"nav-item\"><NavLink to={`/part2`} activeClassName=\"active\" className=\"nav-link\">Part2</NavLink></li>\r\n      </div>\r\n      <div className=\"tabs\">\r\n        <Switch>\r\n        <Route path=\"/part1\" component={Part1} />\r\n        <Route path=\"/part2\" component={Part2} />\r\n                <Route exact path=\"/\">\r\n                    <Redirect to=\"/part1\" />\r\n                </Route>\r\n                <Route component={NotFound} />\r\n        </Switch>\r\n      </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Routes;","import React from 'react';\r\nimport Routes from './routes';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <Routes />\r\n        </Router>\r\n        );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport Components from './components';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nrender(\r\n<Provider store={store}>\r\n    <Components />\r\n</Provider>, document.getElementById('app'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}